;;; -*- mode: emacs-lisp; -*-
;; initialization file for emacs editor

; at first we have custom variables, as other code in .emacs may depend on it (HTTP proxy setting etc)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ack-executable (executable-find "ack-grep"))
 '(bsh-jar "~/work/javautil/beanshell/bsh.jar")
 '(bsh-startup-timeout 2)
 '(coffee-tab-width 2)
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(el-get-user-package-directory "~/.emacs.d/el-get-init-files")
 '(emms-cache-file "~/.emacs.d/.emms-cache")
 '(emms-info-asynchronously nil)
 '(emms-info-functions (quote (emms-info-ogginfo emms-info-mpd)))
 '(emms-player-list (quote (emms-player-mpd)))
 '(emms-player-mpd-music-directory "/stuff/music")
 '(emms-playlist-buffer-name "*EMMS Playlist*")
 '(emms-playlist-default-major-mode (quote emms-playlist-mode))
 '(emms-playlist-mode-open-playlists t)
 '(emms-show-format "NP: %s")
 '(emms-stream-default-action "play")
 '(emms-track-initialize-functions (quote (emms-info-initialize-track)))
 '(emms-volume-change-amount 3)
 '(emms-volume-change-function (quote emms-volume-mpd-change))
 '(gtags-path-style (quote relative))
 '(newsticker-html-renderer (quote w3m-region))
 '(org-agenda-files (quote ("~/Dropbox/org" "~/Dropbox/org/deft" "~/.org-mode/")))
 '(org-agenda-include-diary t)
 '(org-capture-templates (quote (("t" "Todo" entry (file+headline "~/Dropbox/org/agenda.org" "Tasks") (file "~/Dropbox/org/templates/todo.orgtmpl")))))
 '(safe-local-variable-values (quote ((eval ignore-errors "Write-contents-functions is a buffer-local alternative to before-save-hook" (add-hook (quote write-contents-functions) (lambda nil (delete-trailing-whitespace) nil)) (require (quote whitespace)) "Sometimes the mode needs to be toggled off and on." (whitespace-mode 0) (whitespace-mode 1)) (whitespace-line-column . 80) (whitespace-style face trailing lines-tail) (require-final-newline . t))))
 '(send-mail-function (quote smtpmail-send-it))
 '(smtpmail-smtp-server "localhost")
 '(smtpmail-smtp-service 1025)
 '(tail-max-size 20)
 '(tail-volatile nil)
 '(tramp-syntax (quote ftp))
 '(url-proxy-services (quote (("no_proxy" . "localhost") ("http" . "yellow.nc3a.nato.int:8088") ("https" . "yellow.nc3a.nato.int:8088"))))
 '(url-using-proxy "http://yellow.nc3a.nato.int:8088" t)
)

;; setup environment variables for proxies
(setq enable-proxy t) ; for now always yes
(when enable-proxy
  (setenv "http_proxy" "http://yellow.nc3a.nato.int:8088")
  (setenv "https_proxy" "http://yellow.nc3a.nato.int:8088")
  (setenv "no_proxy" "localhost")
  )

;; setup ELPA
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)


;; el-get setup
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

;; install el-get if necessary. Downloading directly from Github link
;; (as described in https://github.com/dimitri/el-get/tree/4.stable#basic-setup
;; does not work with proxy that I have to use at work
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (load-file "~/.emacs.d/el-get-install.el")
    ; note that this install latest 'stable' release.
    ; for how to use 'master' branch, see the el-get wiki
    (goto-char (point-max))
    (eval-print-last-sexp)))

; list of el-get packages to use
(setq my:el-get-packages
  '(auto-complete ace-jump-mode ack anything
	   auto-complete auto-complete-css auto-complete-emacs-lisp
	   auto-complete-latex auto-complete-yasnippet breadcrumb chumpy-windows
	   deft dired-single ecb
	   ;egg
	   ;git-commit-mode git-rebase-mode magit ;; Magit comes from (M)ELPA
	   full-ack fuzzy iedit
	   js2-mode
	   ;js-comint
	   logito multiple-cursors
	   ;multi-web-mode
	   nxhtml pcache popup smart-tab smex twittering-mode
	   undo-tree workgroups yasnippet malabar-mode restclient
	   flymake-shell auto-complete-ya-gtags
	   ;clojure-mode
	   cider
	   paredit
	   rainbow-delimiters
	   ;shell-pop
	   mu4e
	   popwin emms dark-laptop-theme solarized-theme
	   goto-last-change projectile helm helm-swoop helm-ag helm-dash ahg company
	   ;eclim
	   emacs-ditz
	   slime
	   ;swank-js ac-slime ;; too slow a bit
	   skewer-mode
	   skeleton-complete
	   anzu-mode markdown-mode-github
	   coffee-mode flycheck
	   git-timemachine
	   emacs-groovy-mode
	   json browse-kill-ring-new))

; my version of el-get recipes
(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-recipes")
; sync!
(el-get 'sync my:el-get-packages)

;; my various elisp code
(add-to-list 'load-path "~/.emacs.d/various")

;; Beginning of the el4r block:
;; RCtool generated this block automatically. DO NOT MODIFY this block!
;;(add-to-list 'load-path "/usr/share/emacs/site-lisp")
;;(require 'el4r)
;;(el4r-boot)
;; End of the el4r block.

; Load el4r, which loads Xiki
;(add-to-list 'load-path "/var/lib/gems/1.9.1/gems/trogdoro-el4r-1.0.10/data/emacs/site-lisp/")
;(require 'el4r)
;(el4r-boot)
;(el4r-troubleshooting-keys)

;; User-setting area is below this line.

;; custom settings for Org mode

;; using custom version of Org mode (default one from the Ubuntu distro is too old)
(require 'org-latex)
(setq org-log-mode 'time)
(setq org-default-notes-file "~/Dropbox/org/notes.org")
(define-key global-map "\C-cc" 'org-capture)

; settings to use org-babel to render DITAA diagrams in the buffer (C-c C-c on the image)
(setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
;(setq org-plantuml-jar-path "~/java/plantuml.jar")

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; save clocking across emacs sessions
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)


;; turn on Interactively Do Things thingie
(require 'ido)
(ido-mode t)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t) ; fuzzy matching is a must have
(setq ido-enable-last-directory-history nil) ; forget latest selected directory names
(setq ido-case-fold t)

;; From: Ryan McGreary
;; Scratch buffer goodness

;; If the *scratch* buffer is killed, recreate it automatically
(save-excursion
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

(defun kill-scratch-buffer ()
  ;; The next line is just in case someone calls this manually
  (set-buffer (get-buffer-create "*scratch*"))
  ;; Kill the current (*scratch*) buffer
  (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  (kill-buffer (current-buffer))
  ;; Make a brand new *scratch* buffer
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  ;; Since we killed it, don't let caller do that.
  nil)

;; smart-tab - lets test it

(require 'smart-tab)
;;(global-set-key [(tab)] 'smart-tab)

;; my settings & bindings
(setq compilation-window-height 15)

;; turns on visible regions (if it's not done yet)
(unless (transient-mark-mode t)
  (transient-mark-mode))

;; GNU global tagging solution settings

(defun djcb-gtags-create-or-update ()
  "create or update the gnu global tag file"
  (interactive)
  (if (not (= 0 (call-process "global" nil nil nil " -p"))) ; tagfile doesn't exist?
    (let ((olddir default-directory)
          (topdir (read-directory-name
                    "gtags: top of source tree:" default-directory)))
      (cd topdir)
      (shell-command "gtags -q && echo 'created tagfile'")
      (cd olddir)) ; restore
    ;;  tagfile already exists; update it
    (shell-command "global -uq &>/dev/null && echo 'updated tagfile'")))

(add-hook 'gtags-mode-hook  (lambda()
    (local-set-key (kbd "M-.") 'gtags-find-tag)   ; find a tag, also M-.
    (local-set-key (kbd "M-,") 'gtags-find-rtag)))  ; reverse tag

;; add the global tags creation for the programming mode - C

(add-hook 'c-mode-common-hook
  (lambda ()
    (require 'gtags)
    (gtags-mode t)
    (when (not (string-match "/usr/src/linux/" (expand-file-name default-directory)))
    (djcb-gtags-create-or-update))))

;; add the global tags creation for the programming mode - Java
(add-hook 'java-mode-hook
  (lambda()
    (require 'gtags)
    (gtags-mode t)
    (djcb-gtags-create-or-update)))

(add-hook 'malabar-mode-hook
  (lambda()
    (require 'gtags)
    (gtags-mode t)
    (djcb-gtags-create-or-update)))


;; iedit package
;; allows 'dynamic' replace/edit operation on multiple places in buffer at the same time
;; (hard to define, you need to see for yourself! :)
(require 'iedit)
(define-key global-map (kbd "C-;") 'iedit-mode)

;; tracking changes - highlight changes mode
;; higlight changes in documents
;; TODO: does not load
;;(global-highlight-changes t)
;;(setq highlight-changes-visibility-initial-state nil); initially hide

;; map M-g to goto-line
(global-set-key (kbd "M-g") 'goto-line)

;; generic Emacs settings
;; From: Ryan McGreary

;; Don't show the startup screen
(setq inhibit-startup-message t)

;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;; Prevent the annoying beep on errors
(setq visible-bell t)

;; Make sure all backup files only live in one place
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Gotta see matching parens
(show-paren-mode t)

;; Don't truncate lines
(setq truncate-lines t)
(setq truncate-partial-width-windows nil)

;; Trailing whitespace is unnecessary
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))

;; Trash can support
(setq delete-by-moving-to-trash t)

;; toggle visibility
(global-set-key (kbd "<f6>")      'highlight-changes-visible-mode) ;; changes
;; remove the change-highlight in region
(global-set-key (kbd "S-<f6>")    'highlight-changes-remove-highlight)

;; alt-pgup/pgdown jump to the previous/next change

;; if you're not already using it for something else...
(global-set-key (kbd "<M-prior>") 'highlight-changes-next-change)
(global-set-key (kbd "<M-next>")  'highlight-changes-previous-change)

;;(set-face-foreground 'highlight-changes nil)
;;(set-face-background 'highlight-changes "#F870068")
;;(set-face-foreground 'highlight-changes-delete nil)
;;(set-face-background 'highlight-changes-delete "#B80029")

;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
(autoload 'groovy-mode "groovy-mode" "Groovy editing mode." t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
(add-to-list 'auto-mode-alist '("\.story$" . groovy-mode)) ;;; easyb stories
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))


(add-hook 'c-mode-common-hook
	  (lambda ()
	    (font-lock-add-keywords nil
                 '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

; set default web browser to W3M
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show an URL." t)
(global-set-key (kbd "C-c x") 'browse-url)

;; show nice window of recently killed lines in the kill ring
(global-set-key "\C-cy" '(lambda ()
   (interactive)
   (popup-menu 'yank-menu)))

;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
;;(require 'org-latex)
;;(unless (boundp 'org-export-latex-classes)
;;  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
  '("article-djcb"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{graphicx}
\\defaultfontfeatures{Mapping=tex-text}
\\setromanfont{Gentium}
\\setromanfont [BoldFont={Gentium Basic Bold},
                ItalicFont={Gentium Basic Italic}]{Gentium Basic}
\\setsansfont{Charis SIL}
\\setmonofont[Scale=0.8]{DejaVu Sans Mono}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-to-pdf-process
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes

;; mode for editing BAT files (sometimes it happens)
(autoload 'bat-mode "bat-mode" "DOS and WIndows BAT files" t)
(add-to-list 'auto-mode-alist '("[.]bat$" . bat-mode))

;; set up w3m rendering for newsticker
(autoload 'w3m-region "w3m"
  "Render region in current buffer and replace with result." t)

(autoload 'w3m-toggle-inline-image "w3m"
  "Toggle the visibility of an image under point." t)

; display images in w3m
(autoload 'w3m-default-display-inline-images "w3m"
  "By default display images in w3m" t)

;; newsticker
(add-hook 'newsticker-mode-hook 'imenu-add-menubar-index)

;; WindMove - smarter window switching
;; switch between windows with 'super'-up/down/left/right
(windmove-default-keybindings 'super)

;; quick and easy font re-size
(defun djcb-zoom (n)
  "with positive N, increase the font size, otherwise decrease it"
  (set-face-attribute 'default (selected-frame) :height
    (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))

(global-set-key (kbd "C-+")      '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key [C-kp-add]       '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key (kbd "C--")      '(lambda nil (interactive) (djcb-zoom -1)))
(global-set-key [C-kp-subtract]  '(lambda nil (interactive) (djcb-zoom -1)))

;; use EasyPG to automatically encrypt and decrypt all files that end with *.gpg
(require 'epa-file)
(epa-file-enable)

;; use js2-mode for editing JavaScript
(add-to-list 'auto-mode-alist '("[.]js$" . js2-mode))


; add source to auto complete from Semantic
;; NOTE: commenting it out as it slows down emacs!!
;(add-hook 'java-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-semantic)))


;; add folding minor mode to JavaScript mode
(add-hook 'js2-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)
	    ;; add highlighting TODO etc keywords
	    (font-lock-add-keywords nil
				    '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

;; trying to fix the super-ugly indentation of js2-mode
;; see: http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
(autoload 'espresso-mode "espresso")
(require 'espresso)

(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (espresso--proper-indentation parse-status))
           node)

      (save-excursion

        ;; I like to indent case and labels to half of the tab width
        (back-to-indentation)
        (if (looking-at "case\\s-")
            (setq indentation (+ indentation (/ espresso-indent-level 2))))

        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = "bar",
        ;;     bar = "foo";
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation (+ 4 indentation))))

      (indent-line-to indentation)
      (when (> offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (< (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the "buffer
          ;; modified" property for nothing
          (beginning-of-line)
          (unless (looking-at "\\s-*$")
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'espresso)
  (setq espresso-indent-level 4
        indent-tabs-mode nil
        c-basic-offset 4)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)]
    '(lambda()
       (interactive)
       (insert "/* -----[ ")
       (save-excursion
         (insert " ]----- */"))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  ;; fix bug with my-indent-sexp
  (setq c-current-comment-prefix
	(if (listp c-comment-prefix-regexp)
	    (cdr-safe (or (assoc major-mode c-comment-prefix-regexp)
			  (assoc 'other c-comment-prefix-regexp)))
	  c-comment-prefix-regexp))
  (message "My JS2 hook"))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

; add regexp for compilation to recoginze node's error messages
; TODO: how to limit the regexp to shell buffers only?
(add-to-list 'compilation-error-regexp-alist
	     '("\\(/[^:]+\\):\\([0-9]+\\):\\([0-9]+\\)" 1 2 3))


;; set the color scheme - emacs 24 way!
;(load-theme 'dark-laptop t)
(load-theme 'solarized-dark t)

;; generate UUID identifiers from Emacs
;; as seen as at http://nullprogram.com/blog/2010/05/11/
(defun uuid-create ()
  "Return a newly generated UUID. This uses a simple hashing of variable data."
  (let ((s (md5 (format "%s%s%s%s%s%s%s%s%s%s"
                        (user-uid)
                        (emacs-pid)
                        (system-name)
                        (user-full-name)
                        user-mail-address
                        (current-time)
                        (emacs-uptime)
                        (garbage-collect)
                        (random)
                        (recent-keys)))))
    (format "%s-%s-3%s-%s-%s"
            (substring s 0 8)
            (substring s 8 12)
            (substring s 13 16)
            (substring s 16 20)
            (substring s 20 32))))

(defun uuid-insert ()
  "Inserts a new UUID at the point."
  (interactive)
  (insert (uuid-create)))

; optional
;(global-set-key "\C-x!" 'uuid-insert)


;; set up SOCKS proxy tunnel when starting ERC (from work)
(defvar connect-proxy "/usr/bin/connect-proxy"
  "location of SOCKS connect-proxy utility that will be used to create the SOCKS proxy tunnel")

(defvar socks-proxy "yellow.nc3a.nato.int:1080"
  "definition of SOCKS proxy, in 'host:port' format")

(defun setup-socks-proxy-connection (irc-server-ip-address irc-server-port local-port)
  "start external 'connect-proxy' process setting up tunnel to proxy server. After that it will be possible to
  connect to IRC via 'erc-ssl' call that points to the localhost:local-port.
  'irc-server-ip-address' should be the IP address of the IRC server that supports SSL,
  'irc-server-port' should be the (remote) port where IRC server runs on,
  'local-port' port on local machine."
  (let ((name  (format "%s@%s:%s->%s:%s" "socks-proxy-tunnel" "localhost" local-port irc-server-ip-address irc-server-port)))
    (start-process name name
		   connect-proxy "-d" "-S" socks-proxy "-P" (number-to-string local-port)
		   irc-server-ip-address (number-to-string irc-server-port))
	(message (concat "SOCKS tunnel to " irc-server-ip-address ":" (number-to-string irc-server-port)
			 " on local port " (number-to-string local-port) " started."))
	)
  )


; start proxy tunnel before ERC connects
(add-hook 'erc-before-connect
	(lambda (one two three) (setup-socks-proxy-connection "213.92.8.4" 7000 7000)))

(defun start-irc ()
   "Connect to IRC server."
   (interactive)
   ; or should it be 'erc-tls ?...
   (autoload 'erc-ssl "erc")
   (erc-ssl :server "localhost" :port 7000
        :nick "lwiechec" :password "OldFox123" :full-name "Lukasz Wiechec")
   (setq erc-autojoin-channels-alist '(("localhost" . "#emacs"))))

;; iy-go-to-char - quick jump to the next character in the line
(require 'iy-go-to-char)
(global-set-key (kbd "M-m") 'iy-go-to-char)

;; start Emacs server
(require 'server)
(unless (server-running-p) (server-start))

;; by default C-z suspends emacs: I don't like it
(global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; automatic nxml-mode for XML schema files
(setq auto-mode-alist (cons '("\\.xsd$" . nxml-mode) auto-mode-alist))

;; TRAMP config
(require 'tramp)
(setq tramp-default-method "ssh")
;(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
;(set-default 'tramp-default-proxies-alist nil)

(put 'narrow-to-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'erase-buffer 'disabled nil)

; easier way to join lines
; taken from http://emacsredux.com/blog/2013/05/30/joining-lines
(defun top-join-line ()
   "Join the current line with the line beneath it."
   (interactive)
   (delete-indentation 1))
(global-set-key (kbd "M-^") 'top-join-line)

;; clean way to view Java class files in the buffer
;; note: depends on the presence of 'javap' tool
(add-to-list 'file-name-handler-alist '("\\.class$" . javap-handler))

(defun javap-handler (op &rest args)
  "Handle .class files by putting the output of javap in the buffer."
  (cond
   ((eq op 'get-file-buffer)
    (let ((file (car args)))
      (with-current-buffer (create-file-buffer file)
        (call-process "javap" nil (current-buffer) nil "-verbose"
                      "-classpath" (file-name-directory file)
                      (file-name-sans-extension (file-name-nondirectory file)))
        (setq buffer-file-name file)
        (setq buffer-read-only t)
        (set-buffer-modified-p nil)
        (goto-char (point-min))
        (java-mode)
        (current-buffer))))
   ((javap-handler-real op args))))

(defun javap-handler-real (operation args)
  "Run the real handler without the javap handler installed."
  (let ((inhibit-file-name-handlers
         (cons 'javap-handler
               (and (eq inhibit-file-name-operation operation)
                    inhibit-file-name-handlers)))
        (inhibit-file-name-operation operation))
    (apply operation args)))

; turn on ElDoc
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

; add smart function that creates shell buffer, asking for a name
(defun create-shell ()
  "creates a shell with a given name. The name will contains surrounding asterisks '*' so you don't need to provide them."
  (interactive);; "Prompt\n shell name:")
  (let ((shell-name (read-string "shell name: " nil)))
    (shell (concat "*" shell-name "*"))))

;; define my style for CC-mode and descendants (c++, java etc)
;; based on the info page on CC-mode

; re-bind RET to automatically indent
(defun my-c-initialization-hook ()
  (define-key c-mode-base-map "\C-m" 'c-context-line-break))
(add-hook 'c-initialization-hook 'my-c-initialization-hook)

;; offset customizations not in my-c-style
;; This will take precedence over any setting of the syntactic symbol
;; made by a style.
(setq c-offsets-alist '((member-init-intro . ++)))

;; Create my personal style.
;; deprecated for now, using google style
(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-basic-offset             . 2)
    (c-comment-only-line-offset . 0)
    (c-hanging-braces-alist     . ((substatement-open after)
                                   ))
    (c-hanging-braces-alist . ((defun-open after)
                               (defun-close before after)
                               (class-open after)
                               (class-close before after)
                               (inexpr-class-open after)
                               (inexpr-class-close before)
                               (namespace-open after)
                               (inline-open after)
                               (inline-close before after)
                               (block-open after)
                               (block-close . c-snug-do-while)
                               (extern-lang-open after)
                               (extern-lang-close after)
                               (statement-case-open after)
                               (substatement-open after)))
    (c-cleanup-list             . (scope-operator
                                   empty-defun-braces
                                   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                   (substatement-open . 0)
                                   (case-label        . 4)
                                   (block-open        . 0)
                                   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")
(c-add-style "PERSONAL" my-c-style)

;; load Google's C style (will be used for Java as well)
(require 'google-c-style)


; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ; set my personal style for the current buffer
  ;(c-set-style "PERSONAL")
  (c-set-style "Google")
  ; other customizations
  (setq tab-width 8
        ;; this will make sure spaces are used instead of tabs
        indent-tabs-mode nil)
  ; we like auto-newline, but not hungry-delete
  (c-toggle-auto-newline 1))
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

; skeleton expansion took over M-g so goto-line got un-bound from M-g so...
(global-set-key (kbd "C-M-g") 'goto-line)

; I tend to compile a lot from shell mode so I would like to enable compilation-minor-mode
; to be able to quickly jump to errors
(defun my-shell-mode-hook ()
  (compilation-shell-minor-mode))
(add-hook 'shell-mode-hook 'my-shell-mode-hook)

; disable auto-complete mode as it interfers with company-mode
(global-auto-complete-mode -1)

; enable unique names for buffers. Helpful when having to work with multiple Ant/Maven/Buildr build files etc.
(require 'uniquify)
(toggle-uniquify-buffer-names)

; StumpWM stuff
(require 'stumpwm-mode)
; adapt Ediff mode *NOT* to spawn another frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

; I don't like toolbar, disable it
(tool-bar-mode -1)

; make fonts smaller
(djcb-zoom -5)

; for easier finding of the sources of function and libraries
(define-key 'help-command (kbd "C-l") 'find-library)
(define-key 'help-command (kbd "C-f") 'find-function)

;; modeline settings (after reading http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html)
; position information (line / column)
(column-number-mode t) ;; first turn on the column number mode

; formatting of the 'position' of the cursor
(setq-default mode-line-position
              '((-3 "%p") (size-indication-mode ("/" (-4 "%I")))
                " "
                (line-number-mode
                 ("%l" (column-number-mode ":%c")))))

(defvar lunaryorn-projectile-mode-line
  '(:propertize
    (:eval (when (ignore-errors (projectile-project-root))
             (concat " " (projectile-project-name))))
    face font-lock-constant-face)
  "Mode line format for Projectile.")
(put 'lunaryorn-projectile-mode-line 'risky-local-variable t)

(defvar lunaryorn-vc-mode-line
  '(" " (:propertize
         ;; Strip the backend name from the VC status information
         (:eval (let ((backend (symbol-name (vc-backend (buffer-file-name)))))
                  (substring vc-mode (+ (length backend) 2))))
         face font-lock-variable-name-face))
  "Mode line format for VC Mode.")
(put 'lunaryorn-vc-mode-line 'risky-local-variable t)

(setq-default mode-line-format
              '("%e" mode-line-front-space
                ;; Standard info about the current buffer
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                mode-line-buffer-identification " " mode-line-position
                ;; Some specific information about the current buffer:
		(wg-mode-line-on
		 (:eval
		  (wg-mode-line-string)))
                lunaryorn-projectile-mode-line ; Project information
                (vc-mode lunaryorn-vc-mode-line) ; VC information
                (flycheck-mode flycheck-mode-line) ; Flycheck status
                (multiple-cursors-mode mc/mode-line) ; Number of cursors
                ;; Misc information, notably battery state and function name
                " "
                mode-line-misc-info
                ;; And the modes, which I don't really care for anyway
                " " mode-line-modes mode-line-end-spaces))

(provide 'emacs)
;;; emacs ends here
