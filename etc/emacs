;;; -*- mode: emacs-lisp; -*-
;; initialization file for emacs editor

(add-to-list 'load-path "~/.emacs.d/various")

;; add nice 'undo tree feature'
(add-to-list 'load-path "~/.emacs.d/undo-tree")
(require 'undo-tree)
(global-undo-tree-mode)

;; custom settings for Org mode
;; using custom version of Org mode (default one from the Ubuntu distro is too old)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/org/lisp"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/org/contrib/lisp"))
(require 'org-install)
(require 'org-latex)
(setq org-log-mode 'time)
(setq org-default-notes-file "~/Dropbox/org/notes.org")
(define-key global-map "\C-cc" 'org-capture)

;; load nXHtml
;; org-mode needs to be loaded before that
(load "~/.emacs.d/nxhtml/autostart.el")

;; turn on Interactively Do Things thingie
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ; fuzzy matching is a must have
(setq ido-enable-last-directory-history nil) ; forget latest selected directory names

;; Egg - Emacs got Git
;; Git
(progn
  (setq egg-dir "~/.emacs.d/egg")
  (load-file (format "%s/egg.el" egg-dir))
  (require 'egg)
  ;; override the VC settingmore sexy handling of buffer list
  (global-set-key (kbd "\C-x v d") 'egg-status)
  (global-set-key (kbd "\C-x v c") 'egg-commit-log-edit)
  (global-set-key (kbd "\C-x v i") 'egg-file-stage-current-file)
  (global-set-key (kbd "\C-x v l") 'egg-log)
  (global-set-key (kbd "\C-x v o") 'egg-file-checkout-other-version)
  (global-set-key (kbd "\C-x v u") 'egg-file-cancel-modifications)
  (global-set-key (kbd "\C-x v v") 'egg-next-action)
  (global-set-key (kbd "\C-x v =") 'egg-file-diff)
  (global-set-key (kbd "\C-x v ~") 'egg-file-version-other-window)
  (global-set-key (kbd "\C-x v b") 'egg-start-new-branch)
  (global-set-key (kbd "\C-x v a") 'egg-file-toggle-blame-mode)
)


;; From: Ryan McGreary
;; Scratch buffer goodness

;; If the *scratch* buffer is killed, recreate it automatically
(save-excursion
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

(defun kill-scratch-buffer ()
  ;; The next line is just in case someone calls this manually
  (set-buffer (get-buffer-create "*scratch*"))
  ;; Kill the current (*scratch*) buffer
  (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  (kill-buffer (current-buffer))
  ;; Make a brand new *scratch* buffer
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  ;; Since we killed it, don't let caller do that.
  nil)

;; yasnippet - cool gadget for quick coding
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(setq yas/root-directory '("~/.emacs.d/my-yasnippets" "~/.emacs.d/yasnippet/snippets"))
(mapc 'yas/load-directory yas/root-directory)
(yas/global-mode 't)

;; smart-tab - lets test it

(require 'smart-tab)
;;(global-set-key [(tab)] 'smart-tab)

;; my settings & bindings
(setq compilation-window-height 15)
(global-set-key (kbd "\C-x \C-b") 'electric-buffer-list)  ;; more sexy handling of buffer list

;; turns on visible regions (if it's not done yet)
(unless (transient-mark-mode t)
  (transient-mark-mode))

;; GNU global tagging solution settings

(defun djcb-gtags-create-or-update ()
  "create or update the gnu global tag file"
  (interactive)
  (if (not (= 0 (call-process "global" nil nil nil " -p"))) ; tagfile doesn't exist?
    (let ((olddir default-directory)
          (topdir (read-directory-name
                    "gtags: top of source tree:" default-directory)))
      (cd topdir)
      (shell-command "gtags -q && echo 'created tagfile'")
      (cd olddir)) ; restore
    ;;  tagfile already exists; update it
    (shell-command "global -uq 2>&1 && echo 'updated tagfile'")))

(add-hook 'gtags-mode-hook  (lambda()
    (local-set-key (kbd "M-.") 'gtags-find-tag)   ; find a tag, also M-.
    (local-set-key (kbd "M-,") 'gtags-find-rtag)))  ; reverse tag

;; add the global tags creation for the programming mode - C

(add-hook 'c-mode-common-hook
  (lambda ()
    (require 'gtags)
    (gtags-mode t)
    (when (not (string-match "/usr/src/linux/" (expand-file-name default-directory)))
    (djcb-gtags-create-or-update))))

;; add the global tags creation for the programming mode - Java
(add-hook 'java-mode-hook
  (lambda()
    (require 'gtags)
    (gtags-mode t)
    (djcb-gtags-create-or-update)))

;; smex - more intelligent M-x
(add-to-list 'load-path (expand-file-name "~/.emacs.d/smex"))
(setq smex-save-file "~/.emacs.d/smex.save")
(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-X") 'smex)

;; iedit package
;; allows 'dynamic' replace/edit operation on multiple places in buffer at the same time
;; (hard to define, you need to see for yourself! :)
(setq load-path (cons "~/.emacs.d/iedit" load-path))
(require 'iedit)
(define-key global-map (kbd "C-;") 'iedit-mode)

;; tracking changes - highlight changes mode
;; higlight changes in documents
;; TODO: does not load
;;(global-highlight-changes t)
;;(setq highlight-changes-visibility-initial-state nil); initially hide

;; map M-g to goto-line
(global-set-key (kbd "M-g") 'goto-line)

;; generic Emacs settings
;; From: Ryan McGreary

;; Don't show the startup screen
(setq inhibit-startup-message t)

;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;; Prevent the annoying beep on errors
(setq visible-bell t)

;; Make sure all backup files only live in one place
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Gotta see matching parens
(show-paren-mode t)

;; Don't truncate lines
(setq truncate-lines t)
(setq truncate-partial-width-windows nil)

;; Trailing whitespace is unnecessary
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))

;; Trash can support
(setq delete-by-moving-to-trash t)

;; toggle visibility
(global-set-key (kbd "<f6>")      'highlight-changes-visible-mode) ;; changes
;; remove the change-highlight in region
(global-set-key (kbd "S-<f6>")    'highlight-changes-remove-highlight)

;; alt-pgup/pgdown jump to the previous/next change

;; if you're not already using it for something else...
(global-set-key (kbd "<M-prior>") 'highlight-changes-next-change)
(global-set-key (kbd "<M-next>")  'highlight-changes-previous-change)

;;(set-face-foreground 'highlight-changes nil)
;;(set-face-background 'highlight-changes "#F870068")
;;(set-face-foreground 'highlight-changes-delete nil)
;;(set-face-background 'highlight-changes-delete "#B80029")

;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
(autoload 'groovy-mode "groovy-mode" "Groovy editing mode." t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
(add-to-list 'auto-mode-alist '("\.story$" . groovy-mode)) ;;; easyb stories
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

;; breadcrumb - intelligent bookmark saving
(require 'breadcrumb)

;;  Examples below assign a set of keys to the breadcrumb bookmark functions.
(global-set-key (kbd "s-.")             'bc-set)            ;; Windows key-. for set bookmark
(global-set-key [(meta j)]              'bc-previous)       ;; M-j for jump to previous
(global-set-key [(shift meta j)]        'bc-next)           ;; Shift-M-j for jump to next
(global-set-key [(meta up)]             'bc-local-previous) ;; M-up-arrow for local previous
(global-set-key [(meta down)]           'bc-local-next)     ;; M-down-arrow for local next
(global-set-key [(control c)(j)]        'bc-goto-current)   ;; C-c j for jump to current bookmark
(global-set-key [(control x)(meta j)]   'bc-list)           ;; C-x M-j for the bookmark menu list

;; using custom version of CEDET
;
;; TODO: use emacsmirror git repo?
;
(add-to-list 'load-path (expand-file-name "~/.emacs.d/cedet-1.0.1/common"))
(load-file "~/.emacs.d/cedet-1.0.1/common/cedet.el")
;; enable EDE (Project Management) features
(global-ede-mode 1)
;; * This enables the database and idle reparse engines
(semantic-load-enable-minimum-features)

;; fixing the ECB - we will use the CVS version, not packaged by Debian
(add-to-list 'load-path (expand-file-name "~/.emacs.d/ecb"))
(require 'ecb)

;; Malabar mode - better Java mode for Emacs
;; (check the source at https://github.com/espenhw/malabar-mode)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/malabar-1.4.0/lisp"))
(require 'cedet)
(semantic-load-enable-minimum-features) ;; or enable more if you wish
(require 'malabar-mode)
(setq malabar-groovy-lib-dir (expand-file-name "~/.emacs.d/malabar-1.4.0/lib"))
(add-to-list 'auto-mode-alist '("\\.java\\'" . malabar-mode))

; optional: simulate constant compile-after-save (as in Eclipse)
;(add-hook 'malabar-mode-hook
;     (lambda ()
;       (add-hook 'after-save-hook 'malabar-compile-file-silently
;                  nil t)))

(add-hook 'malabar-mode-hook  (lambda()
    (local-set-key [(f11)] 'javadoc-lookup)
    (local-set-key [(shift f11)] 'javadoc-help)))


;; JDEE - temporarily turned off
;;(add-to-list 'load-path (expand-file-name "~/.emacs.d/jdee-2.4.0.1/lisp"))
;;(add-to-list 'load-path (expand-file-name "~/.emacs.d/elib-1.0"))
;;(require 'jde)


;; global keyboard mapping for Emacs' anything
(global-set-key (kbd "s-a") 'anything)

(add-hook 'c-mode-common-hook
	  (lambda ()
	    (font-lock-add-keywords nil
                 '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

;; twittering mode
(add-to-list 'load-path (expand-file-name "~/.emacs.d/twittering-mode"))
(setq twittering-proxy-use t)
(setq twittering-proxy-server "yellow.nc3a.nato.int")
(setq twittering-proxy-port 8088)
(require 'twittering-mode)

;; set default web browser to Google Chrome
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium-browser")

;; show nice window of recently killed lines in the kill ring
(global-set-key "\C-cy" '(lambda ()
   (interactive)
   (popup-menu 'yank-menu)))

;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
;;(require 'org-latex)
;;(unless (boundp 'org-export-latex-classes)
;;  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
  '("article-djcb"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{graphicx}
\\defaultfontfeatures{Mapping=tex-text}
\\setromanfont{Gentium}
\\setromanfont [BoldFont={Gentium Basic Bold},
                ItalicFont={Gentium Basic Italic}]{Gentium Basic}
\\setsansfont{Charis SIL}
\\setmonofont[Scale=0.8]{DejaVu Sans Mono}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-to-pdf-process
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes

;; mode for editing BAT files (sometimes it happens)
(autoload 'bat-mode "bat-mode" "DOS and WIndows BAT files" t)
(add-to-list 'auto-mode-alist '("[.]bat$" . bat-mode))

;; anything.el - quick way to access 'things' in Emacs
(add-to-list 'load-path "~/.emacs.d/anything")
(require 'anything-config)
;; (require 'anything) [ not needed? ]
;; (require 'anything-gtags) [ not needed? ]


;; http://jblevins.org/projects/deft/
(add-to-list 'load-path "~/.emacs.d/deft")
(when (require 'deft nil 'noerror)
   (setq
      deft-extension "org"
      deft-directory "~/Dropbox/org/deft/"
      deft-text-mode 'org-mode
      deft-auto-save-interval 5.0)
   (global-set-key (kbd "<f9>") 'deft))

;; set up w3m rendering for newsticker
(autoload 'w3m-region "w3m"
  "Render region in current buffer and replace with result." t)

(autoload 'w3m-toggle-inline-image "w3m"
  "Toggle the visibility of an image under point." t)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ack-executable (executable-find "ack-grep"))
 '(bsh-jar "~/work/javautil/beanshell/bsh.jar")
 '(bsh-startup-timeout 2)
 '(bsh-vm-args (quote ("-Djava.net.preferIPv4Stack=true" "-Dhttp.proxyHost=yellow.nc3a.nato.int" "-Dhttp.proxyPort=8088")))
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(ecb-options-version "2.40")
 '(ecb-source-path (quote ("~/work/projects")))
 '(ecb-tree-indent 2)
 '(gtags-path-style (quote relative))
 '(jde-ant-home "/usr/share/ant")
 '(jde-ant-read-target t)
 '(jde-global-classpath (quote ("./lib" "./lib/jetty" "./build")))
 '(jde-jdk-registry (quote (("1.6.0_24" . "/home/luke/work/jdk/jdk1.6.0_24"))))
 '(org-agenda-files (quote ("~/Dropbox/org" "~/Dropbox/org/deft" "~/.org-mode/")))
 '(org-agenda-include-diary t)
 '(org-capture-templates (quote (("t" "Todo" entry (file+headline "~/Dropbox/org/agenda.org" "Tasks") (file "~/Dropbox/org/templates/todo.orgtmpl"))))))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;; workgroups.el - manage window configuration in the frame the eas way
;; https://github.com/tlh/workgroups.el

(add-to-list 'load-path (expand-file-name "~/.emacs.d/workgroups.el"))
(require 'workgroups)
(setq wg-prefix-key (kbd "C-c w"))
(workgroups-mode 1)
(wg-load (expand-file-name "~/.emacs.d/workgroups-saved"))

;; full-ack.el
(add-to-list 'load-path (expand-file-name "~/.emacs.d/full-ack/"))
(autoload 'ack-same "full-ack" nil t)
(autoload 'ack "full-ack" nil t)
(autoload 'ack-find-same-file "full-ack" nil t)
(autoload 'ack-find-file "full-ack" nil t)

;; WindMove - smarter window switching
;; switch between windows with 'super'-up/down/left/right
(windmove-default-keybindings 'super)

;; quick and easy font re-size
(defun djcb-zoom (n)
  "with positive N, increase the font size, otherwise decrease it"
  (set-face-attribute 'default (selected-frame) :height
    (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))

(global-set-key (kbd "C-+")      '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key [C-kp-add]       '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key (kbd "C--")      '(lambda nil (interactive) (djcb-zoom -1)))
(global-set-key [C-kp-subtract]  '(lambda nil (interactive) (djcb-zoom -1)))

;; use EasyPG to automatically encrypt and decrypt all files that end with *.gpg
(require 'epa-file)
(epa-file-enable)

;; use js2-mode for editing JavaScript
(add-to-list 'load-path (expand-file-name "~/.emacs.d/js2-mode"))
(add-to-list 'auto-mode-alist '("[.]js$" . js2-mode))
(require 'js2-mode)

;; use single buffer for dired to avoid too many of them
(add-to-list 'load-path (expand-file-name "~/.emacs.d/dired-single"))
(require 'dired-single)
(defun my-dired-init ()
  (define-key dired-mode-map [return] 'joc-dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'joc-dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
    (function
     (lambda nil (interactive) (joc-dired-single-buffer "..")))))

;; if dired's already loaded, then the keymap will be bound
(if (boundp 'dired-mode-map)
    ;; we're good to go; just add our bindings
    (my-dired-init)
  ;; it's not loaded yet, so add our bindings to the load-hook
  (add-hook 'dired-load-hook 'my-dired-init))

;; use gist.el
(add-to-list 'load-path (expand-file-name "~/.emacs.d/gist.el"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/tabulated-list.el"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/gh"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/pcache"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/logito"))
(require 'gist)

;; auto-complete-mode
; popup.el is a dependency for auto-complete-mode
(add-to-list 'load-path (expand-file-name "~/.emacs.d/popup"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/auto-complete-mode"))
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete-mode/dict")
(setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))
(global-auto-complete-mode t)
; Start auto-completion after 2 characters of a word
(setq ac-auto-start 2)
; case sensitivity is important when finding matches
(setq ac-ignore-case nil)

; js-comint.el - execute JavaScript from emacs
; check 'M-x run-js, js-send-* etc'
(add-to-list 'load-path "~/.emacs.d/js-comint")
(require 'js-comint)
;; Use node as our repl
(setq inferior-js-program-command "node")

(setq inferior-js-mode-hook
      (lambda ()
        ;; We like nice colors
        (ansi-color-for-comint-mode-on)
        ;; Deal with some prompt nonsense
        (add-to-list 'comint-preoutput-filter-functions
                     (lambda (output)
                       (replace-regexp-in-string ".*1G\.\.\..*5G" "..."
						 (replace-regexp-in-string ".*1G.*3G" "> " output))))))

;; add folding minor mode to JavaScript mode
(add-hook 'js2-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)))

;; trying to fix the super-ugly indentation of js2-mode
;; see: http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
(autoload 'espresso-mode "espresso")
(require 'espresso)

(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (espresso--proper-indentation parse-status))
           node)

      (save-excursion

        ;; I like to indent case and labels to half of the tab width
        (back-to-indentation)
        (if (looking-at "case\\s-")
            (setq indentation (+ indentation (/ espresso-indent-level 2))))

        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = "bar",
        ;;     bar = "foo";
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation (+ 4 indentation))))

      (indent-line-to indentation)
      (when (> offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (< (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the "buffer
          ;; modified" property for nothing
          (beginning-of-line)
          (unless (looking-at "\\s-*$")
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'espresso)
  (setq espresso-indent-level 4
        indent-tabs-mode nil
        c-basic-offset 4)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)]
    '(lambda()
       (interactive)
       (insert "/* -----[ ")
       (save-excursion
         (insert " ]----- */"))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  ;; fix bug with my-indent-sexp
  (setq c-current-comment-prefix
	(if (listp c-comment-prefix-regexp)
	    (cdr-safe (or (assoc major-mode c-comment-prefix-regexp)
			  (assoc 'other c-comment-prefix-regexp)))
	  c-comment-prefix-regexp))
  (message "My JS2 hook"))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

;; set the color scheme
(require 'color-theme)
(color-theme-dark-laptop)

;; try solarized color theme
(add-to-list 'load-path (expand-file-name "~/.emacs.d/emacs-color-theme-solarized"))
(require 'color-theme-solarized)
;;(color-theme-solarized-dark)


;; generate UUID identifiers from Emacs
;; as seen as at http://nullprogram.com/blog/2010/05/11/
(defun uuid-create ()
  "Return a newly generated UUID. This uses a simple hashing of variable data."
  (let ((s (md5 (format "%s%s%s%s%s%s%s%s%s%s"
                        (user-uid)
                        (emacs-pid)
                        (system-name)
                        (user-full-name)
                        user-mail-address
                        (current-time)
                        (emacs-uptime)
                        (garbage-collect)
                        (random)
                        (recent-keys)))))
    (format "%s-%s-3%s-%s-%s"
            (substring s 0 8)
            (substring s 8 12)
            (substring s 13 16)
            (substring s 16 20)
            (substring s 20 32))))

(defun uuid-insert ()
  "Inserts a new UUID at the point."
  (interactive)
  (insert (uuid-create)))

; optional
;(global-set-key "\C-x!" 'uuid-insert)

;;multi-web-mode
(add-to-list 'load-path "~/.emacs.d/multi-web-mode")
(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
		  (js2-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
		  (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
(multi-web-global-mode 1)

;; javadoc-help - easier way to get javadocs in emacs
(add-to-list 'load-path "~/.emacs.d/javadoc-help")
(require 'javadoc-help)

;; set up SOCKS proxy tunnel when starting ERC (from work)
(defvar connect-proxy "/usr/bin/connect-proxy"
  "location of SOCKS connect-proxy utility that will be used to create the SOCKS proxy tunnel")

(defvar socks-proxy "yellow.nc3a.nato.int:1080"
  "definition of SOCKS proxy, in 'host:port' format")

(defun setup-socks-proxy-connection (irc-server-ip-address irc-server-port local-port)
  "start external 'connect-proxy' process setting up tunnel to proxy server. After that it will be possible to
  connect to IRC via 'erc-ssl' call that points to the localhost:local-port.
  'irc-server-ip-address' should be the IP address of the IRC server that supports SSL,
  'irc-server-port' should be the (remote) port where IRC server runs on,
  'local-port' port on local machine."
  (start-process "socks-proxy-tunnel" "socks-proxy-tunnel"
		 connect-proxy "-d" "-S" socks-proxy "-P" (number-to-string local-port)
		 irc-server-ip-address (number-to-string irc-server-port))
  (message (concat "SOCKS tunnel to " irc-server-ip-address ":" (number-to-string irc-server-port)
		   " on local port " (number-to-string local-port) " started."))
  )

; start proxy tunnel before ERC connects
(add-hook 'erc-before-connect
	(lambda (one two three) (setup-socks-proxy-connection "213.92.8.4" 7000 7000)))

(defun start-irc ()
   "Connect to IRC server."
   (interactive)
   ; or should it be 'erc-tls ?...
   (autoload 'erc-ssl "erc")
   (erc-ssl :server "localhost" :port 7000
        :nick "lwiechec" :full-name "Lukasz Wiechec")
   (setq erc-autojoin-channels-alist '(("localhost" "#emacs" "#screen"))))
