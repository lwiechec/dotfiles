;;; -*- mode: emacs-lisp; -*-
;;; Commentary:

;; initialization file for emacs editor

;;; Code:

;; load customized variables from separate file. This keeps emacs inif file cleaner
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

;; my various elisp code
(add-to-list 'load-path "~/.emacs.d/various")

;; set up SOCKS proxy tunnel when starting ERC (from work)
(defvar connect-proxy "/usr/bin/connect-proxy"
  "location of SOCKS connect-proxy utility that will be used to create the SOCKS proxy tunnel")

(defvar socks-proxy "yellow.nc3a.nato.int:1080"
  "definition of SOCKS proxy, in 'host:port' format")

(defun setup-socks-proxy-connection (irc-server-ip-address irc-server-port irc-server-local-port)
  "start external 'connect-proxy' process setting up tunnel to proxy server. After that it will be possible to
  connect to IRC via 'erc-ssl' call that points to the localhost:local-port.
  'irc-server-ip-address' should be the IP address of the IRC server that supports SSL,
  'irc-server-port' should be the (remote) port where IRC server runs on,
  'irc-server-local-port' port on local machine."
  (let ((name  (format "%s@%s:%s->%s:%s" "socks-proxy-tunnel" "localhost" irc-server-local-port irc-server-ip-address irc-server-port)))
    (message name)
    (start-process name name
		   connect-proxy "-d" "-S" socks-proxy "-p" (number-to-string irc-server-local-port)
		   irc-server-ip-address (number-to-string irc-server-port))
	(message (concat "SOCKS tunnel to " irc-server-ip-address ":" (number-to-string irc-server-port)
			 " on local port " (number-to-string irc-server-local-port) " started."))
	)
  )

; start proxy tunnel before ERC connects
(defun setup-socks-proxy-connection-from-work ()
  "setups socks proxy connection when I am at work."
  (setup-socks-proxy-connection "193.219.128.49" 7000 7000))

;; setup the proxy
;; note that w3m will get the proxies from system environment variables
(defun proxy-set () "sets (probably) all the proxies"
       (interactive)
       (let* ((_proxy_host "yellow.nc3a.nato.int")
	      (_proxy_port "8088")
	      (_proxy (concat _proxy_host ":" _proxy_port))
	      (_no_proxy_env "localhost,127.0.0.1,nu.nc3a")
	      (_no_proxy_regexp "localhost|127\.0\.0\.1|*.nu.nc3a"))
	 (progn
	   (setenv "http_proxy" (concat "http://" _proxy))
	   (setenv "https_proxy" (concat "http://" _proxy))
	   (setenv "JAVA_OPTS" (mapconcat (lambda (a) (concat "-D" (car a) "=" (cdr a)))
					  (list (cons "http.proxyHost" _proxy_host)
						(cons "http.proxyPort" _proxy_port)) " "))
	   (setenv "no_proxy" _no_proxy_env)
	   (setq url-proxy-services (list (cons "no_proxy" _no_proxy_regexp) (cons "http" _proxy) (cons "https" _proxy)))
	   (setq malabar-groovy-proxy-host _proxy_host
		 malabar-groovy-proxy-port _proxy_port)
	   ;; set up hooks for ERC
	   (setq irc-server-host "localhost")
	   (setq irc-server-port 7000)
	   (add-hook 'erc-before-connect (lambda (host port nick)
                                           (setup-socks-proxy-connection "193.219.128.49" 7000 7000)))
	   (message "Proxy (NCIA) is set.")
	 )))

(defun proxy-cdte-set () "sets (probably) all the proxies"
       (interactive)
       (let* ((_proxy_host "yellow.nc3a.nato.int")
	      (_proxy_port "8088")
	      (_proxy (concat _proxy_host ":" _proxy_port))
	      (_no_proxy_env "localhost,127.0.0.1,192.168.113.*,192.168.74.*")
	      (_no_proxy_regexp "localhost"))
	 (progn
	   (setenv "http_proxy" (concat "http://" _proxy))
	   (setenv "https_proxy" (concat "http://" _proxy))
	   (setenv "JAVA_OPTS" (mapconcat (lambda (a) (concat "-D" (car a) "=" (cdr a)))
					  (list (cons "http.proxyHost" _proxy_host)
						(cons "http.proxyPort" _proxy_port)) " "))
	   (setenv "no_proxy" _no_proxy_env)
	   (setq url-proxy-services (list (cons "no_proxy" _no_proxy_regexp) (cons "http" _proxy) (cons "https" _proxy)))
	   (setq malabar-groovy-proxy-host _proxy_host
		 malabar-groovy-proxy-port _proxy_port)
	   ;; set up hooks for ERC
	   (setq irc-server-host "localhost")
	   (setq irc-server-port 7000)
	   (add-hook 'erc-before-connect (lambda (host port nick)
					   (setup-socks-proxy-connection "193.219.128.49" 7000 7000)))
	   (message "Proxy (CDTE) is set.")
	 )))

(defun proxy-unset () "cleans up the proxy settings for Emacs"
  (interactive)
  (progn
    (setenv "http_proxy" nil)
    (setenv "https_proxy" nil)
    (setenv "no_proxy" nil)
    (setenv "HTTP_PROXY" nil)
    (setenv "HTTPS_PROXY" nil)
    (setenv "NO_PROXY" nil)
    (setenv "JAVA_OPTS" nil)
    (setq url-proxy-services nil
    ;;url-using-proxy nil
	  w3m-command-arguments-alist nil
	  malabar-groovy-proxy-host ""
	  malabar-groovy-proxy-port "")
    ;; ERC setup
    (setq irc-server-host "irc.freenode.org")
    (setq irc-server-port 7000)

    (remove-hook 'erc-before-connect
                 (lambda (host port nick)
                   (setup-socks-proxy-connection "193.219.128.49" 7000 7000)))
    (message "Proxy is un-set."))
  )

(defvar proxy-configs-alist
      '(("NCiA - normal"
         proxy-set)
        ("NCiA - CDTE"
         proxy-cdte-set)
        ("No proxy"
         proxy-unset)))

(defun select-proxy ()
  "choose proxy interactively."
  (interactive)
  (let* ((proxy-type
          (completing-read (format "choose proxy (%s) "
                                   (mapconcat #'(lambda (var) (car var))
                                              proxy-configs-alist " / "))
                           (mapcar #'(lambda (var) (car var)) proxy-configs-alist)
                           nil t nil nil (caar proxy-configs-alist)))
         (init-func (cdr (assoc proxy-type proxy-configs-alist))))
    (apply init-func)
    ))

;; simple check if we are at home or at work
;; depends on my wicd scripts that cat the ESSID and BSSID values for
;; wireless access points
(defun chomp (str)
      "Chomp leading and tailing whitespace from STR."
      (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                           str)
        (setq str (replace-match "" t t str)))
      str)

(defun file-string (file)
    "Read the contents of a file and return as a string."
    (with-current-buffer (find-file-noselect file)
      (buffer-string)))

(defconst essid-file "/etc/ESSID"
  "file where Wicd has written the ESSID of the network")

(defun autoset-proxy (essid-file)
  "auto-sets the proxy. ESSID-FILE is the name of the text file with ."
  (if (file-exists-p essid-file)
      (let ((essid (chomp (file-string essid-file))))
        (cond
         ;; list of conditions for all access points that we know about
         ((or (string= essid "Ziggo53726") (string= essid "CasaPopos")) (proxy-unset)) ; no proxy for home
         ((string= essid "NC3A-84") (proxy-set))
         (proxy-unset)))
    (progn
      (message (format "File with ESSID %s not there, cannot autoset proxy" essid-file)))))

;; we would like to autoset the proxy, if possible...
(autoset-proxy essid-file)

;; el-get setup
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

;; install el-get if necessary. Downloading directly from Github link
;; (as described in https://github.com/dimitri/el-get/tree/4.stable#basic-setup
;; does not work with proxy that I have to use at work
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (load-file "~/.emacs.d/el-get-install.el")
    ; note that this install latest 'stable' release.
    ; for how to use 'master' branch, see the el-get wiki
    (goto-char (point-max))
    (eval-print-last-sexp)))

;; setup ELPA
;; (require 'package)
;; (setq package-archives
;;       '(
;; 	("org" . "http://orgmode.org/elpa/")
;; 	;;("ELPA" . "http://tromey.com/elpa/")
;; 	("gnu" . "http://elpa.gnu.org/packages/")
;; 	("marmalade" . "http://marmalade-repo.org/packages/")
;; 	;;("SC" . "http://joseito.republika.pl/sunrise-commander/")
;; 	("melpa" . "http://melpa.org/packages/")))
;; (package-initialize)

;;(require 'el-get-elpa)
;; Build the El-Get copy of the package.el packages if we have not
;; built it before.  Will have to look into updating later ...
;; (unless (file-directory-p el-get-recipe-path-elpa)
;;   (el-get-elpa-build-local-recipes))


; list of el-get packages to use
(setq my:el-get-packages
      '(flycheck names seq
        ace-jump-mode
        breadcrumb chumpy-windows
        dired-single dired-plus
        fuzzy
        org-mode logito multiple-cursors
        nxhtml pcache popup smart-tab smex twittering-mode
        undo-tree yasnippet
        restclient jdibug clojure-mode
        slamhound flim mu4e popwin emms dark-laptop-theme solarized-theme
        ahg
        helm helm-swoop helm-dash helm-gtags
        slime flycheck git-timemachine
        groovy-emacs-mode fsharp-mode emacs-sos
        json browse-kill-ring-new neotree
        haskell-mode expand-region prodigy hydra boxquote web-mode
        smart-mode-line ag
        dockerfile-mode helm-pages page-break-lines
        persp-projectile browse-at-remote beacon
        maven-pom-mode yaml-mode js2-mode))

        ;; it is also possible to provide in-line recipies, like that
        ;; no need to repeat the names of the packages in the my:el-get-packages, as we use Elisp magic below
(setq el-get-sources
      '((:name ace-jump-mode
               :features ace-jump-mode
               :after (progn
                        (ace-jump-mode-enable-mark-sync)
                        (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)))

        (:name magit
               :depends (dash)
               :after (progn
                        (global-set-key (kbd "<f7>") 'magit-status)))
        (:name cedet
               :after (progn
                        (add-hook
                         'semantic-idle-completions-mode-hook
                         (lambda ()
                           (local-set-key (kbd "C-c s \t") 'senator-completion-menu-popup)))))
        (:name cider
               :depends (eval-sexp-fu spinner)
               :after (progn
                        (setq nrepl-buffer-name-show-port t
                              cider-prompt-save-file-on-load 'always-save
                              cider-test-show-report-on-success t)))
        (:name guide-key
               :after (progn
                        (setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))
                        (guide-key-mode 1)))
        (:name perspective
               :after (progn
                        (persp-mode 1)))
        (:name projectile
               :depends (helm perspective))
        (:name flycheck
               :after (progn
                        (global-flycheck-mode 1)))
        (:name iedit
               :after (progn
                        (global-set-key (kbd "C-;") 'iedit-mode)))
        (:name slime
               :features (slime-autoloads)
               :after (progn
                        (slime-setup '(slime-banner slime-fancy))
                        (setq slime-complete-symbol*-fancy t)
                        (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
                        ; i'm using sbcl for my lisp
                        (setq inferior-lisp-program "sbcl")
                        (slime-setup)
                        ))
        (:name rainbow-delimiters
               :after (progn
                        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
        (:name delight
               :after (progn
                        (delight '((helm-mode nil)
                                   (beacon-mode nil) ; does not work yet
                                   (yas-minor-mode ""))))) ; does not work yet
        (:name anzu
               :after (progn
                        (global-anzu-mode 1)
                        (setq anzu-mode-lighter "")
                        ;; I like the replace functions from anzu
                        (global-set-key [remap query-replace] 'anzu-query-replace)
                        (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)))
        (:name beacon
               :after (progn
                        (beacon-mode 1)
                        (setq beacon-mode-lighter "")))
        (:name google-this
               :after (progn
                        (global-set-key (kbd "C-x g") 'google-this-mode-submap)))
        (:name google-translate
               :feature google-translate-smooth-ui
               :after (progn
                        (global-set-key "\C-ct" 'google-translate-smooth-translate)
                        (setq google-translate-translation-directions-alist
                              '(("de" . "en") ("en" . "de") ("en" . "pt") ("pt" . "en")))))
        (:name goto-last-change
               :after (progn
                        (global-set-key (kbd "C-x C-/") 'goto-last-change)))
        (:name helm-ag
               :depends (helm)
               :after (progn
                        (custom-set-variables
                         '(helm-ag-base-command "ag --nocolor --nogroup --ignore-case")
                         '(helm-ag-command-option "--all-text")
                         '(helm-ag-insert-at-point 'symbol))))
        (:name deft
               :type github
               :url "https://github.com/jrblevin/deft.git"
               :after (progn
                           (setq
                            deft-extension "org"
                            deft-directory "~/Dropbox/org/deft/"
                            deft-text-mode 'org-mode
                            deft-auto-save-interval 5.0)
                           (global-set-key (kbd "<f9>") 'deft)))
        (:name markdown-mode-github
               :depends (org-mode)
               :feature org-table
               :after (progn
                        (defun cleanup-org-tables ()
                          (save-excursion
                            (goto-char (point-min))
                            (while (search-forward "-+-" nil t) (replace-match "-|-"))
                            ))

                        (add-hook 'markdown-mode-hook 'orgtbl-mode)
                        (add-hook 'markdown-mode-hook
                                  (lambda()
                                    (add-hook 'after-save-hook 'cleanup-org-tables  nil 'make-it-local)))))
        (:name coffee-mode
               :after (progn
                        (custom-set-variables '(coffee-tab-width 2))))
        (:name company-mode
               :depends (ropemacs)
               :after (progn (global-company-mode 1)
                             (setq company-idle-delay nil)
                             (global-set-key (kbd "<C-tab>") 'company-complete)))))

        ;; append the names above the the list of all el-get packages for syncing
(setq my:all-el-get-packages
      (append my:el-get-packages
              (mapcar 'el-get-source-name el-get-sources)))

                                        ; my version of el-get recipes
(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-recipes")
                                        ; sync!
;; sync all el-get packages
(el-get 'sync my:all-el-get-packages)

;; custom settings for Org mode

;; using custom version of Org mode (default one from the Ubuntu distro is too old)
;;(require 'org-latex)
(setq org-log-mode 'time)
(setq org-default-notes-file "~/Dropbox/org/notes.org")
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-c'" 'org-time-stamp)
; settings to use org-babel to render DITAA diagrams in the buffer (C-c C-c on the image)
(setq org-ditaa-jar-path "~/.emacs.d/el-get/org-mode/contrib/scripts/ditaa.jar")
;(setq org-plantuml-jar-path "~/java/plantuml.jar")

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; save clocking across emacs sessions
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

;; turn on Interactively Do Things thingie
(require 'ido)
(ido-mode t)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t) ; fuzzy matching is a must have
(setq ido-enable-last-directory-history nil) ; forget latest selected directory names
(setq ido-case-fold t)

;; From: Ryan McGreary
;; Scratch buffer goodness

;; If the *scratch* buffer is killed, recreate it automatically
(save-excursion
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

(defun kill-scratch-buffer ()
  ;; The next line is just in case someone calls this manually
  (set-buffer (get-buffer-create "*scratch*"))
  ;; Kill the current (*scratch*) buffer
  (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  (kill-buffer (current-buffer))
  ;; Make a brand new *scratch* buffer
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  ;; Since we killed it, don't let caller do that.
  nil)

;; smart-tab - lets test it

;;(require 'smart-tab)
;;(global-set-key [(tab)] 'smart-tab)

;; my settings & bindings
(setq compilation-window-height 15)

;; turns on visible regions (if it's not done yet)
(unless (transient-mark-mode t)
  (transient-mark-mode))

;; GNU global tagging solution settings


;; from http://www.emacswiki.org/emacs/GnuGlobal
(defun gtags-root-dir ()
  "Returns GTAGS root directory or nil if doesn't exist."
  (with-temp-buffer
    (if (zerop (call-process "global" nil t nil "-pr"))
	(buffer-substring (point-min) (1- (point-max)))
      nil)))

(defun gtags-update-single (filename)
  "Update Gtags database for changes in a single file"
  (interactive)
  (start-process "update-gtags" "update-gtags" "bash" "-c" (concat "cd " (gtags-root-dir) " ; gtags --single-update " filename )))

(defun gtags-update-current-file()
  (interactive)
  (defvar filename)
  (setq filename (replace-regexp-in-string (gtags-root-dir) "." (buffer-file-name (current-buffer))))
  (gtags-update-single filename)
  (message "Gtags updated for %s" filename))

(defun gtags-update-hook()
  "Update GTAGS file incrementally upon saving a file"
  (when (boundp 'helm-gtags-mode)
    (when (gtags-root-dir)
      (gtags-update-current-file))))

(add-hook 'after-save-hook 'gtags-update-hook)

;; map M-g to goto-line
(global-set-key (kbd "M-g") 'goto-line)

;; generic Emacs settings
;; From: Ryan McGreary

;; Don't show the startup screen
(setq inhibit-startup-message t)

;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;; Prevent the annoying beep on errors
(setq visible-bell t)

;; Make sure all backup files only live in one place
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Gotta see matching parens
(show-paren-mode t)

;; Don't truncate lines
(setq truncate-lines t)
(setq truncate-partial-width-windows nil)

;; Trailing whitespace is unnecessary
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))

;; Trash can support
(setq delete-by-moving-to-trash t)

;; alt-pgup/pgdown jump to the previous/next change

;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
;(autoload 'groovy-mode "groovy-mode" "Groovy editing mode." t)
;(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
;(add-to-list 'auto-mode-alist '("\.story$" . groovy-mode)) ;;; easyb stories
;(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

(add-hook 'c-mode-common-hook
	  (lambda ()
	    (font-lock-add-keywords nil
                 '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

; set default web browser to W3M
(setq browse-url-browser-function '(
				    ("twitter.com" . browse-url-firefox) ; Twitter doesn;t look good in W3M, use chromium
				    ("accounts.google.com" . browse-url-firefox)
                                    ("github.com" . browse-url-firefox)
                                    ("github.nu.nc3a" . browse-url-firefox)
                                    ("economist.com" .  browse-url-firefox)
                                    ;;("google.com" . eww-browse-url)
                                        ;("." . w3m-goto-url-new-session) ; default
                                    ;; at work, eww does not work correctly with HTTPS
                                    ("https://." . browse-url-firefox)
                                    ("." . eww-browse-url)
				    ))
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show an URL." t)
(global-set-key (kbd "C-c x") 'browse-url)

(setq browse-url-generic-program "firefox")
;;      browse-url-generic-args '("--proxy-pac-url=file:///home/luke/pac.js"))

;; show nice window of recently killed lines in the kill ring
(global-set-key "\C-cy" '(lambda ()
   (interactive)
   (popup-menu 'yank-menu)))


;; mode for editing BAT files (sometimes it happens)
(autoload 'bat-mode "bat-mode" "DOS and WIndows BAT files" t)
(add-to-list 'auto-mode-alist '("[.]bat$" . bat-mode))

;; WindMove - smarter window switching
;; switch between windows with 'super'-up/down/left/right
(windmove-default-keybindings 'super)

;; quick and easy font re-size
(defun djcb-zoom (n)
  "with positive N, increase the font size, otherwise decrease it"
  (set-face-attribute 'default (selected-frame) :height
    (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))

(global-set-key (kbd "C-+")      '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key [C-kp-add]       '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key (kbd "C--")      '(lambda nil (interactive) (djcb-zoom -1)))
(global-set-key [C-kp-subtract]  '(lambda nil (interactive) (djcb-zoom -1)))

;; use EasyPG to automatically encrypt and decrypt all files that end with *.gpg
(require 'epa-file)
(epa-file-enable)

;; ---- compilation settings
;; add regexp for compilation to recognize node's error messages
;; TODO: how to limit the regexp to shell buffers only?
(add-to-list 'compilation-error-regexp-alist
	     '("\\(/[^:]+\\):\\([0-9]+\\):\\([0-9]+\\)" 1 2 3))

; shortcut for complilation. Use C-u <f5> to specify the compilation command.
(global-set-key (kbd "<f5>") (lambda ()
			       (interactive)
			       (get-buffer-create "*compilation*")
			       (setq-local compilation-read-command nil)
			       (call-interactively 'compile)))
;; no asking before compiling
(setq compilation-ask-about-save nil)
;; Stop on the first error.
(setq compilation-scroll-output 'next-error)
;; Don't stop on info or warnings.
(setq compilation-skip-threshold 2)

;; making the compilation shell interactive so that it will read the aliases etc
(setq shell-file-name "bash"
      shell-command-switch "-ic")

;; set the color scheme - emacs 24 way!
;(load-theme 'dark-laptop t)
(load-theme 'solarized-dark t)

;; generate UUID identifiers from Emacs
;; as seen as at http://nullprogram.com/blog/2010/05/11/
(defun uuid-create ()
  "Return a newly generated UUID. This uses a simple hashing of variable data."
  (let ((s (md5 (format "%s%s%s%s%s%s%s%s%s%s"
                        (user-uid)
                        (emacs-pid)
                        (system-name)
                        (user-full-name)
                        user-mail-address
                        (current-time)
                        (emacs-uptime)
                        (garbage-collect)
                        (random)
                        (recent-keys)))))
    (format "%s-%s-3%s-%s-%s"
            (substring s 0 8)
            (substring s 8 12)
            (substring s 13 16)
            (substring s 16 20)
            (substring s 20 32))))

(defun uuid-insert ()
  "Inserts a new UUID at the point."
  (interactive)
  (insert (uuid-create)))

; optional
;(global-set-key "\C-x!" 'uuid-insert)

(defun start-irc ()
   "Connect to IRC server using my default IRC settings."
   (interactive)
   (autoload 'erc-ssl "erc")
   (erc-ssl :server irc-server-host :port irc-server-port
        :nick "lwiechec" :full-name "Lukasz Wiechec")
   (setq erc-autojoin-channels-alist '(("localhost" . "#emacs"))))


(defun start-irc-slack()
   "Connect to IRC server using my default IRC settings."
   (interactive)
   (autoload 'erc-ssl "erc")
   ;; TODO need to remove all the hooks here
   (setq erc-before-connect nil)
   (add-hook 'erc-before-connect
             (lambda (host port nick)
               (setup-socks-proxy-connection "52.6.30.134" 8000 8000)))
   (erc-ssl :server "localhost" :port 8000 :password "majeec.XnrWOqJJd9i4tmy9bvKN"
        :nick "lwiechec" :full-name "Lukasz Wiechec")
   (setq erc-autojoin-channels-alist '(("localhost" . "#general")
                                       ("localhost" . "#jenkins")
                                       ("localhost" . "#nagios")
                                       ("localhost" . "#jira"))))

;; iy-go-to-char - quick jump to the next character in the line
(require 'iy-go-to-char)
(global-set-key (kbd "M-m") 'iy-go-to-char)

;; start Emacs server
(require 'server)
(unless (server-running-p) (server-start))

;; by default C-z suspends emacs: I don't like it
(global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; automatic nxml-mode for XML schema files
(setq auto-mode-alist (cons '("\\.xsd$" . nxml-mode) auto-mode-alist))
;; let's autocomplete
(setq nxml-slash-auto-complete-flag t)

;; TRAMP config
(require 'tramp)
(setq tramp-default-method "ssh")
;(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
;(set-default 'tramp-default-proxies-alist nil)

(put 'narrow-to-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'upcase-region 'disabled nil)

; easier way to join lines
; taken from http://emacsredux.com/blog/2013/05/30/joining-lines
(defun top-join-line ()
   "Join the current line with the line beneath it."
   (interactive)
   (delete-indentation 1))
(global-set-key (kbd "M-^") 'top-join-line)

;; clean way to view Java class files in the buffer
;; note: depends on the presence of 'javap' tool
(add-to-list 'file-name-handler-alist '("\\.class$" . javap-handler))

(defun javap-handler (op &rest args)
  "Handle .class files by putting the output of javap in the buffer."
  (cond
   ((eq op 'get-file-buffer)
    (let ((file (car args)))
      (with-current-buffer (create-file-buffer file)
        (call-process "~/work/jdk/default/bin/javap" nil (current-buffer) nil "-verbose"
                      "-classpath" (file-name-directory file)
                      (file-name-sans-extension (file-name-nondirectory file)))
        (setq buffer-file-name file)
        (setq buffer-read-only t)
        (set-buffer-modified-p nil)
        (goto-char (point-min))
        (java-mode)
        (current-buffer))))
   ((javap-handler-real op args))))

(defun javap-handler-real (operation args)
  "Run the real handler without the javap handler installed."
  (let ((inhibit-file-name-handlers
         (cons 'javap-handler
               (and (eq inhibit-file-name-operation operation)
                    inhibit-file-name-handlers)))
        (inhibit-file-name-operation operation))
    (apply operation args)))

; turn on ElDoc
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

;; define my style for CC-mode and descendants (c++, java etc)
;; based on the info page on CC-mode

; re-bind RET to automatically indent
(defun my-c-initialization-hook ()
  (define-key c-mode-base-map "\C-m" 'c-context-line-break))
(add-hook 'c-initialization-hook 'my-c-initialization-hook)

;; offset customizations not in my-c-style
;; This will take precedence over any setting of the syntactic symbol
;; made by a style.
(setq c-offsets-alist '((member-init-intro . ++)))

;; Create my personal style.
;; deprecated for now, using google style
(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-basic-offset             . 2)
    (c-comment-only-line-offset . 0)
    (c-hanging-braces-alist     . ((substatement-open after)
                                   ))
    (c-hanging-braces-alist . ((defun-open after)
                               (defun-close before after)
                               (class-open after)
                               (class-close before after)
                               (inexpr-class-open after)
                               (inexpr-class-close before)
                               (namespace-open after)
                               (inline-open after)
                               (inline-close before after)
                               (block-open after)
                               (block-close . c-snug-do-while)
                               (extern-lang-open after)
                               (extern-lang-close after)
                               (statement-case-open after)
                               (substatement-open after)))
    (c-cleanup-list             . (scope-operator
                                   empty-defun-braces
                                   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                   (substatement-open . 0)
                                   (case-label        . 4)
                                   (block-open        . 0)
                                   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")
(c-add-style "PERSONAL" my-c-style)

;; load Google's C style (will be used for Java as well)
(require 'google-c-style)

; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ; set my personal style for the current buffer
  ;(c-set-style "PERSONAL")
  (google-set-c-style)
  (c-set-style "Google")
  ; other customizations
  (setq tab-width 4
        ;; this will make sure spaces are used instead of tabs
        indent-tabs-mode nil)
  ; we like auto-newline, but not hungry-delete
  (c-toggle-auto-newline 1))
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

; skeleton expansion took over M-g so goto-line got un-bound from M-g so...
(global-set-key (kbd "C-M-g") 'goto-line)

; I tend to compile a lot from shell mode so I would like to enable compilation-minor-mode
; to be able to quickly jump to errors
(defun my-shell-mode-hook ()
  (compilation-shell-minor-mode))
(add-hook 'shell-mode-hook 'my-shell-mode-hook)

; enable unique names for buffers. Helpful when having to work with multiple Ant/Maven/Buildr build files etc.
(require 'uniquify)
(toggle-uniquify-buffer-names)

;; StumpWM stuff
(require 'stumpwm-mode)

;; EDIFF
;; some of the ediff settings come from http://oremacs.com/2015/01/17/setting-up-ediff/
(defmacro csetq (variable value)
  `(funcall (or (get ',variable 'custom-set)
                'set-default)
            ',variable ,value))

;; adapt Ediff mode *NOT* to spawn another frame for control
(csetq ediff-window-setup-function 'ediff-setup-windows-plain)

;; split the windows horizontally, not vertically
(csetq ediff-split-window-function 'split-window-horizontally)

;; ignore whitespace
(csetq ediff-diff-options "-w")

;; I don't like toolbar, disable it
(tool-bar-mode -1)


;; for easier finding of the sources of function and libraries
(define-key 'help-command (kbd "C-l") 'find-library)
(define-key 'help-command (kbd "C-f") 'find-function)

;; modeline settings (after reading http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html)
; position information (line / column)
(column-number-mode t) ;; first turn on the column number mode

;; ----------- modeline
;; formatting of the 'position' of the cursor
(setq-default mode-line-position
              '((-3 "%p") (size-indication-mode ("/" (-4 "%I")))
                " "
                (line-number-mode
                 ("%l" (column-number-mode ":%c")))))

(defvar lunaryorn-projectile-mode-line
  '(:propertize
    (:eval (when (ignore-errors (projectile-project-root))
             (concat " " (projectile-project-name))))
    face font-lock-constant-face)
  "Mode line format for Projectile.")
(put 'lunaryorn-projectile-mode-line 'risky-local-variable t)

(defvar lunaryorn-vc-mode-line
  '(" " (:propertize
         ;; Strip the backend name from the VC status information
         (:eval (let ((backend (symbol-name (vc-backend (buffer-file-name)))))
                  (substring vc-mode (+ (length backend) 2))))
         face font-lock-variable-name-face))
  "Mode line format for VC Mode.")
(put 'lunaryorn-vc-mode-line 'risky-local-variable t)

(setq-default mode-line-format
              '("%e" mode-line-front-space
                ;; Standard info about the current buffer
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                mode-line-buffer-identification ;;" " mode-line-position
                ;; Some specific information about the current buffer:
		;; (wg-mode-line-on
		;;  (:eval
		;;   (wg-mode-line-string)))
                ;;lunaryorn-projectile-mode-line ; Project information
                (vc-mode lunaryorn-vc-mode-line) ; VC information
                (flycheck-mode flycheck-mode-line) ; Flycheck status
                (multiple-cursors-mode mc/mode-line) ; Number of cursors
                ;; Misc information, notably battery state and function name
                " "
                mode-line-misc-info
                ;; And the modes, which I don't really care for anyway
                " " mode-line-modes mode-line-end-spaces))

;; simple journalling with org-mode
(require 'org-journal)
(global-set-key (kbd "C-c j") 'org-journal-entry)


;; display time in in modeline
(display-time-mode 1)
;; I would like to display the battery status as well
;; TODO: (only when disconnected from power?)
(display-battery-mode 1)

;; from http://oremacs.com/2015/02/18/undo-nonsense/
(global-set-key
 (kbd "C-x C-r")
 (lambda () (interactive) (progn
			    (revert-buffer nil t)
			    (message "buffer reverted"))))

;; utilities to start EShell in the directory if current buffer
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-!") 'eshell-here)

(defun eshell/x ()
  (insert "exit")
  (eshell-send-input)
  (delete-window))

;; dired configurations
(setq dired-guess-shell-alist-user
      '(("\\.pdf\\'" "evince")
	("\\.tex\\'" "pdflatex")
	("\\.ods\\'\\|\\.xlsx?\\'\\|\\.docx?\\'\\|\\.csv\\'" "libreoffice")))

;; remove '.' and '..'
(setq dired-listing-switches "-Al --si --time-style long-iso")

(defun xah-dired-sort ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2015-07-30"
  (interactive)
  (let (ξsort-by ξarg)
    (setq ξsort-by (ido-completing-read "Sort by:" '( "date" "size" "name" "dir")))
    (cond
     ((equal ξsort-by "name") (setq ξarg "-Al --si --time-style long-iso "))
     ((equal ξsort-by "date") (setq ξarg "-Al --si --time-style long-iso -t"))
     ((equal ξsort-by "size") (setq ξarg "-Al --si --time-style long-iso -S"))
     ((equal ξsort-by "dir") (setq ξarg "-Al --si --time-style long-iso --group-directories-first"))
     (t (error "logic error 09535" )))
    (dired-sort-other ξarg )))


;; ------------ LDAP setup
(require 'ldap)
(require 'eudc)

(setq eudc-default-return-attributes nil
      eudc-strict-return-matches nil)

(setq ldap-ldapsearch-args (quote ("-tt" "-LLL" "-x")))
(setq eudc-inline-query-format '((name)
                                 (firstname)
                                 (firstname name)
                                 (email)
                                 ))

(setq ldap-host-parameters-alist
      (quote (("nuncidc0001.nu.nc3a" base "dc=nu,dc=nc3a"
               binddn "wiechec@nu.nc3a"
               passwd "OldFox123"))))

(eudc-set-server "nuncidc0001.nu.nc3a" 'ldap t)
(setq eudc-server-hotlist '(("nuncidc0001.nu.nc3a" . ldap)))
(setq eudc-inline-expansion-servers 'hotlist)

(defun enz-eudc-expand-inline()
  (interactive)
  (move-end-of-line 1)
  (insert "*")
  (unless (condition-case nil
              (eudc-expand-inline)
            (error nil))
    (backward-delete-char-untabify 1))
  )

;; bindings in message mode. As I have TAB to provide the addresses from the mu
;; database, I want to have "shift tab" (<backtab>) for the addresses from the
;; LDAP
(eval-after-load "message"
  '(define-key message-mode-map (kbd "<backtab>") 'enz-eudc-expand-inline))
(eval-after-load "sendmail"
  '(define-key mail-mode-map (kbd "<backtab>") 'enz-eudc-expand-inline))
(eval-after-load "post"
  '(define-key post-mode-map (kbd "<backtab>") 'enz-eudc-expand-inline))

;; we don't want to indent with tabs
(setq-default indent-tabs-mode nil)

(global-set-key (kbd "<Scroll_Lock>") 'resize-windows)

;; load my org timesheet utilities
(require 'timesheet-utils)

;; set up my holidays
;; first, clean up the ones that I don't care about
(setq holiday-hebrew-holidays nil
      holiday-islamic-holidays nil
      holiday-bahai-holidays nil
      holiday-oriental-holidays nil)

;; from https://github.com/sri/dotfiles/blob/master/emacs/emacs.d/my-fns.el#L236
(defun my-find-file-as-sudo ()
  (interactive)
  (let ((file-name (buffer-file-name)))
    (when file-name
      (find-alternate-file (concat "/sudo::" file-name)))))

;; from http://echosa.github.io/blog/2012/06/06/improving-ansi-term/

;; kill the ansi-term buffer when terminal exits. No more useless buffers hanging around
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)

;; -------------- term settings
;; we are always using bash as well
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

;; making pasting in the terminal good with C-y
(defun my-term-paste (& string)
 (interactive)
 (process-send-string
  (get-buffer-process (current-buffer))
  (if string string (current-kill 0))))

;; custom hooks
(defun my-term-hook ()
  (goto-address-mode)
  (define-key term-raw-map "\C-y" 'my-term-paste))
(add-hook 'term-mode-hook 'my-term-hook)


; add smart function that creates shell buffer, asking for a name
(defun create-shell-ansi-term ()
  "creates a shell with a given name. The name will contains surrounding asterisks '*' so you don't need to provide them."
  (interactive);; "Prompt\n shell name:")
  (let ((shell-name (read-string "shell name: " nil)))
    (ansi-term my-term-shell (concat "*" shell-name "*"))))

(defun create-shell ()
  "creates a shell with a given name. The name will contains surrounding asterisks '*' so you don't need to provide them."
  (interactive);; "Prompt\n shell name:")
  (let ((shell-name (read-string "shell name: " nil)))
    (shell (concat "*" shell-name "*"))))

;; when C-return is pressed during the isearch session, it will jump to the beginning of the highlighted
;; word, not to the end (as it is by  default)
(define-key isearch-mode-map [(control return)]
  #'isearch-exit-other-end)
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))

;; do the same as C-s but instead takes symbol-at-point
;; so, do C-u C-s with cursos on a symbol and it will find occurences
;; of it
(defun endless/isearch-symbol-with-prefix (p)
  "Like isearch, unless prefix argument is provided.
With a prefix argument P, isearch for the symbol at point."
  (interactive "P")
  (let ((current-prefix-arg nil))
    (call-interactively
     (if p #'isearch-forward-symbol-at-point
       #'isearch-forward))))

(global-set-key [remap isearch-forward]
                #'endless/isearch-symbol-with-prefix)


;;; emacs ends here
