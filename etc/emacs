;;; -*- mode: emacs-lisp; -*-
;; initialization file for emacs editor

; at first we have custom variables, as other code in .emacs may depend on it (HTTP proxy setting etc)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ack-executable (executable-find "ack-grep"))
 '(bsh-jar "~/work/javautil/beanshell/bsh.jar")
 '(bsh-startup-timeout 2)
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(ecb-options-version "2.40")
 '(ecb-source-path (quote ("~/work/projects")))
 '(ecb-tree-indent 2)
 '(el-get-user-package-directory "~/.emacs.d/el-get-init-files")
 '(gtags-path-style (quote relative))
 '(org-agenda-files (quote ("~/Dropbox/org" "~/Dropbox/org/deft" "~/.org-mode/")))
 '(org-agenda-include-diary t)
 '(org-capture-templates (quote (("t" "Todo" entry (file+headline "~/Dropbox/org/agenda.org" "Tasks") (file "~/Dropbox/org/templates/todo.orgtmpl")))))
 '(safe-local-variable-values (quote ((eval ignore-errors "Write-contents-functions is a buffer-local alternative to before-save-hook" (add-hook (quote write-contents-functions) (lambda nil (delete-trailing-whitespace) nil)) (require (quote whitespace)) "Sometimes the mode needs to be toggled off and on." (whitespace-mode 0) (whitespace-mode 1)) (whitespace-line-column . 80) (whitespace-style face trailing lines-tail) (require-final-newline . t))))
 '(tail-max-size 20)
 '(tail-volatile nil)
 '(tramp-syntax (quote url))
 '(url-proxy-services (quote (("no_proxy" . "localhost") ("http" . "yellow.nc3a.nato.int:8088") ("https" . "yellow.nc3a.nato.int:8088"))))
 '(url-using-proxy "http://yellow.nc3a.nato.int:8088" t))

;; using el-get for package management
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/lwiechec/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(setq my:el-get-packages
  '(auto-complete ace-jump-mode ack-menu anything anything-find-project-resourses
	   anything-project auto-complete auto-complete-css auto-complete-emacs-lisp
	   auto-complete-latex auto-complete-yasnippet breadcrumb chumpy-windows
	   deft dired-single ecb egg full-ack fuzzy iedit javadoc-help js2-mode
	   js-comint logito multiple-cursors multi-web-mode
	   nxhtml pcache popup smart-tab smex twittering-mode
	   undo-tree workgroups yasnippet cedet malabar-mode restclient ajc-java-complete
	   flymake-shell auto-complete-ya-gtags
  ))

(el-get 'sync my:el-get-packages)

;; setup ELPA
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
)


;; my various elisp code
(add-to-list 'load-path "~/.emacs.d/various")

;; custom settings for Org mode
;; using custom version of Org mode (default one from the Ubuntu distro is too old)
(require 'org-latex)
(setq org-log-mode 'time)
(setq org-default-notes-file "~/Dropbox/org/notes.org")
(define-key global-map "\C-cc" 'org-capture)

;; turn on Interactively Do Things thingie
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ; fuzzy matching is a must have
(setq ido-enable-last-directory-history nil) ; forget latest selected directory names


;; From: Ryan McGreary
;; Scratch buffer goodness

;; If the *scratch* buffer is killed, recreate it automatically
(save-excursion
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

(defun kill-scratch-buffer ()
  ;; The next line is just in case someone calls this manually
  (set-buffer (get-buffer-create "*scratch*"))
  ;; Kill the current (*scratch*) buffer
  (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  (kill-buffer (current-buffer))
  ;; Make a brand new *scratch* buffer
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  ;; Since we killed it, don't let caller do that.
  nil)

;; smart-tab - lets test it

(require 'smart-tab)
;;(global-set-key [(tab)] 'smart-tab)

;; my settings & bindings
(setq compilation-window-height 15)
(global-set-key (kbd "\C-x \C-b") 'electric-buffer-list)  ;; more sexy handling of buffer list

;; turns on visible regions (if it's not done yet)
(unless (transient-mark-mode t)
  (transient-mark-mode))

;; GNU global tagging solution settings

(defun djcb-gtags-create-or-update ()
  "create or update the gnu global tag file"
  (interactive)
  (if (not (= 0 (call-process "global" nil nil nil " -p"))) ; tagfile doesn't exist?
    (let ((olddir default-directory)
          (topdir (read-directory-name
                    "gtags: top of source tree:" default-directory)))
      (cd topdir)
      (shell-command "gtags -q && echo 'created tagfile'")
      (cd olddir)) ; restore
    ;;  tagfile already exists; update it
    (shell-command "global -uq &>/dev/null && echo 'updated tagfile'")))

(add-hook 'gtags-mode-hook  (lambda()
    (local-set-key (kbd "M-.") 'gtags-find-tag)   ; find a tag, also M-.
    (local-set-key (kbd "M-,") 'gtags-find-rtag)))  ; reverse tag

;; add the global tags creation for the programming mode - C

(add-hook 'c-mode-common-hook
  (lambda ()
    (require 'gtags)
    (gtags-mode t)
    (when (not (string-match "/usr/src/linux/" (expand-file-name default-directory)))
    (djcb-gtags-create-or-update))))

;; add the global tags creation for the programming mode - Java
(add-hook 'java-mode-hook
  (lambda()
    (require 'gtags)
    (gtags-mode t)
    (djcb-gtags-create-or-update)))

(add-hook 'malabar-mode-hook
  (lambda()
    (require 'gtags)
    (gtags-mode t)
    (djcb-gtags-create-or-update)))


;; iedit package
;; allows 'dynamic' replace/edit operation on multiple places in buffer at the same time
;; (hard to define, you need to see for yourself! :)
(require 'iedit)
(define-key global-map (kbd "C-;") 'iedit-mode)

;; tracking changes - highlight changes mode
;; higlight changes in documents
;; TODO: does not load
;;(global-highlight-changes t)
;;(setq highlight-changes-visibility-initial-state nil); initially hide

;; map M-g to goto-line
(global-set-key (kbd "M-g") 'goto-line)

;; generic Emacs settings
;; From: Ryan McGreary

;; Don't show the startup screen
(setq inhibit-startup-message t)

;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;; Prevent the annoying beep on errors
(setq visible-bell t)

;; Make sure all backup files only live in one place
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Gotta see matching parens
(show-paren-mode t)

;; Don't truncate lines
(setq truncate-lines t)
(setq truncate-partial-width-windows nil)

;; Trailing whitespace is unnecessary
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))

;; Trash can support
(setq delete-by-moving-to-trash t)

;; toggle visibility
(global-set-key (kbd "<f6>")      'highlight-changes-visible-mode) ;; changes
;; remove the change-highlight in region
(global-set-key (kbd "S-<f6>")    'highlight-changes-remove-highlight)

;; alt-pgup/pgdown jump to the previous/next change

;; if you're not already using it for something else...
(global-set-key (kbd "<M-prior>") 'highlight-changes-next-change)
(global-set-key (kbd "<M-next>")  'highlight-changes-previous-change)

;;(set-face-foreground 'highlight-changes nil)
;;(set-face-background 'highlight-changes "#F870068")
;;(set-face-foreground 'highlight-changes-delete nil)
;;(set-face-background 'highlight-changes-delete "#B80029")

;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
(autoload 'groovy-mode "groovy-mode" "Groovy editing mode." t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
(add-to-list 'auto-mode-alist '("\.story$" . groovy-mode)) ;;; easyb stories
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))


(add-hook 'c-mode-common-hook
	  (lambda ()
	    (font-lock-add-keywords nil
                 '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

;; set default web browser to Google Chrome
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium-browser")

;; show nice window of recently killed lines in the kill ring
(global-set-key "\C-cy" '(lambda ()
   (interactive)
   (popup-menu 'yank-menu)))

;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
;;(require 'org-latex)
;;(unless (boundp 'org-export-latex-classes)
;;  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
  '("article-djcb"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{graphicx}
\\defaultfontfeatures{Mapping=tex-text}
\\setromanfont{Gentium}
\\setromanfont [BoldFont={Gentium Basic Bold},
                ItalicFont={Gentium Basic Italic}]{Gentium Basic}
\\setsansfont{Charis SIL}
\\setmonofont[Scale=0.8]{DejaVu Sans Mono}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-to-pdf-process
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes

;; mode for editing BAT files (sometimes it happens)
(autoload 'bat-mode "bat-mode" "DOS and WIndows BAT files" t)
(add-to-list 'auto-mode-alist '("[.]bat$" . bat-mode))

;; set up w3m rendering for newsticker
(autoload 'w3m-region "w3m"
  "Render region in current buffer and replace with result." t)

(autoload 'w3m-toggle-inline-image "w3m"
  "Toggle the visibility of an image under point." t)

;; WindMove - smarter window switching
;; switch between windows with 'super'-up/down/left/right
(windmove-default-keybindings 'super)

;; quick and easy font re-size
(defun djcb-zoom (n)
  "with positive N, increase the font size, otherwise decrease it"
  (set-face-attribute 'default (selected-frame) :height
    (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))

(global-set-key (kbd "C-+")      '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key [C-kp-add]       '(lambda nil (interactive) (djcb-zoom 1)))
(global-set-key (kbd "C--")      '(lambda nil (interactive) (djcb-zoom -1)))
(global-set-key [C-kp-subtract]  '(lambda nil (interactive) (djcb-zoom -1)))

;; use EasyPG to automatically encrypt and decrypt all files that end with *.gpg
(require 'epa-file)
(epa-file-enable)

;; use js2-mode for editing JavaScript
(add-to-list 'auto-mode-alist '("[.]js$" . js2-mode))


; add source to auto complete from Semantic
;; NOTE: commenting it out as it slows down emacs!!
;(add-hook 'java-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-semantic)))


; js-comint.el - execute JavaScript from emacs
; check 'M-x run-js, js-send-* etc'
;; Use node as our repl
(setq inferior-js-program-command "node")

(setq inferior-js-mode-hook
      (lambda ()
        ;; We like nice colors
        (ansi-color-for-comint-mode-on)
        ;; Deal with some prompt nonsense
        (add-to-list 'comint-preoutput-filter-functions
                     (lambda (output)
                       (replace-regexp-in-string ".*1G\.\.\..*5G" "..."
						 (replace-regexp-in-string ".*1G.*3G" "> " output))))))

;; add folding minor mode to JavaScript mode
(add-hook 'js2-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)))

;; trying to fix the super-ugly indentation of js2-mode
;; see: http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
(autoload 'espresso-mode "espresso")
(require 'espresso)

(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (espresso--proper-indentation parse-status))
           node)

      (save-excursion

        ;; I like to indent case and labels to half of the tab width
        (back-to-indentation)
        (if (looking-at "case\\s-")
            (setq indentation (+ indentation (/ espresso-indent-level 2))))

        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = "bar",
        ;;     bar = "foo";
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation (+ 4 indentation))))

      (indent-line-to indentation)
      (when (> offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (< (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the "buffer
          ;; modified" property for nothing
          (beginning-of-line)
          (unless (looking-at "\\s-*$")
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'espresso)
  (setq espresso-indent-level 4
        indent-tabs-mode nil
        c-basic-offset 4)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)]
    '(lambda()
       (interactive)
       (insert "/* -----[ ")
       (save-excursion
         (insert " ]----- */"))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  ;; fix bug with my-indent-sexp
  (setq c-current-comment-prefix
	(if (listp c-comment-prefix-regexp)
	    (cdr-safe (or (assoc major-mode c-comment-prefix-regexp)
			  (assoc 'other c-comment-prefix-regexp)))
	  c-comment-prefix-regexp))
  (message "My JS2 hook"))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

;; set the color scheme
(require 'color-theme)
(color-theme-initialize)
(color-theme-dark-laptop)


;; generate UUID identifiers from Emacs
;; as seen as at http://nullprogram.com/blog/2010/05/11/
(defun uuid-create ()
  "Return a newly generated UUID. This uses a simple hashing of variable data."
  (let ((s (md5 (format "%s%s%s%s%s%s%s%s%s%s"
                        (user-uid)
                        (emacs-pid)
                        (system-name)
                        (user-full-name)
                        user-mail-address
                        (current-time)
                        (emacs-uptime)
                        (garbage-collect)
                        (random)
                        (recent-keys)))))
    (format "%s-%s-3%s-%s-%s"
            (substring s 0 8)
            (substring s 8 12)
            (substring s 13 16)
            (substring s 16 20)
            (substring s 20 32))))

(defun uuid-insert ()
  "Inserts a new UUID at the point."
  (interactive)
  (insert (uuid-create)))

; optional
;(global-set-key "\C-x!" 'uuid-insert)


;; set up SOCKS proxy tunnel when starting ERC (from work)
(defvar connect-proxy "/usr/bin/connect-proxy"
  "location of SOCKS connect-proxy utility that will be used to create the SOCKS proxy tunnel")

(defvar socks-proxy "yellow.nc3a.nato.int:1080"
  "definition of SOCKS proxy, in 'host:port' format")

(defun setup-socks-proxy-connection (irc-server-ip-address irc-server-port local-port)
  "start external 'connect-proxy' process setting up tunnel to proxy server. After that it will be possible to
  connect to IRC via 'erc-ssl' call that points to the localhost:local-port.
  'irc-server-ip-address' should be the IP address of the IRC server that supports SSL,
  'irc-server-port' should be the (remote) port where IRC server runs on,
  'local-port' port on local machine."
  (start-process "socks-proxy-tunnel" "socks-proxy-tunnel"
		 connect-proxy "-d" "-S" socks-proxy "-P" (number-to-string local-port)
		 irc-server-ip-address (number-to-string irc-server-port))
  (message (concat "SOCKS tunnel to " irc-server-ip-address ":" (number-to-string irc-server-port)
		   " on local port " (number-to-string local-port) " started."))
  )

; start proxy tunnel before ERC connects
(add-hook 'erc-before-connect
	(lambda (one two three) (setup-socks-proxy-connection "213.92.8.4" 7000 7000)))

(defun start-irc ()
   "Connect to IRC server."
   (interactive)
   ; or should it be 'erc-tls ?...
   (autoload 'erc-ssl "erc")
   (erc-ssl :server "localhost" :port 7000
        :nick "lwiechec" :password "OldFox123" :full-name "Lukasz Wiechec")
   (setq erc-autojoin-channels-alist '(("localhost" "#emacs" "#screen"))))

;; iy-go-to-char - quick jump to the next character in the line
(require 'iy-go-to-char)
(global-set-key (kbd "M-m") 'iy-go-to-char)

;; start Emacs server
(require 'server)
(unless (server-running-p) (server-start))

;; by default C-z suspends emacs: I don't like it
(global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; automatic nxml-mode for XML schema files
(setq auto-mode-alist (cons '("\\.xsd$" . nxml-mode) auto-mode-alist))
